Description: double64_init, float32_init: fix multiple div 0 issues
 This prevents division by zero later in the code.
 .
 Handle the trivial case where psf->sf.channels < 1.
 .
 Also, a crafted file may report a number of channels that is
 so high (i.e. > INT_MAX/sizeof(double)) that it "somehow" gets
 miscalculated to zero (if this makes sense) in the determination of the
 blockwidth. Since we only support a limited number of channels anyway,
 make sure to check here as well.
Author: Erik de Castro Lopo <erikd@mega-nerd.com>
Origin: https://github.com/erikd/libsndfile/commit/8a41dfe2cbd05e08343ad11830790326ade75a0b
        https://github.com/erikd/libsndfile/commit/85c877d5072866aadbe8ed0c3e0590fbb5e16788
--- a/src/double64.c	2011-01-19 11:12:39.000000000 +0100
+++ b/src/double64.c	2018-12-15 13:56:35.122302552 +0100
@@ -91,6 +91,11 @@
 double64_init	(SF_PRIVATE *psf)
 {	static int double64_caps ;
 
+	if (psf->sf.channels < 1 || psf->sf.channels > SF_MAX_CHANNELS)
+	{	psf_log_printf (psf, "double64_init : internal error : channels = %d\n", psf->sf.channels) ;
+		return SFE_INTERNAL ;
+		};
+
 	double64_caps = double64_get_capability (psf) ;
 
 	psf->blockwidth = sizeof (double) * psf->sf.channels ;
--- a/src/float32.c	2018-12-15 13:58:36.037503625 +0100
+++ b/src/float32.c	2018-12-15 13:58:58.149357304 +0100
@@ -88,6 +88,11 @@
 float32_init	(SF_PRIVATE *psf)
 {	static int float_caps ;
 
+	if (psf->sf.channels < 1)
+	{	psf_log_printf (psf, "float32_init : internal error : channels = %d\n", psf->sf.channels) ;
+		return SFE_INTERNAL ;
+		};
+
 	float_caps = float32_get_capability (psf) ;
 
 	psf->blockwidth = sizeof (float) * psf->sf.channels ;
